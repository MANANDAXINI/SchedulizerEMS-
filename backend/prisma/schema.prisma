generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model University {
  id             String          @id @default(uuid())
  name           String          @unique
  adminEmail     String          @unique
  password       String
  country        String
  city           String
  state          String?
  website        String?
  established    DateTime?
  schools        School[]
  academicBlocks AcademicBlock[]
}

model School {
  id           String       @id @default(uuid())
  name         String
  password     String
  universityId String
  departments  Department[]
  university   University   @relation(fields: [universityId], references: [id])
}

model Department {
  id        String     @id @default(uuid())
  name      String
  password  String
  schoolId  String
  school    School     @relation(fields: [schoolId], references: [id])
  schedules Schedule[]
  schemes   Scheme[]
  sections  Section[]
  faculties faculty[]
  rooms     Room[]
}

model Scheme {
  id           String     @id @default(uuid())
  name         String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  sections     Section[]
  semesters    Semester[]
}

model Semester {
  id                String             @id @default(uuid())
  number            Int
  startDate         DateTime
  endDate           DateTime
  schemaId          String
  availability      Int[]
  assignments       Assignment[]
  courses           Course[]
  scheduleSemesters ScheduleSemester[]
  schema            Scheme             @relation(fields: [schemaId], references: [id])
}

model Course {
  id           String       @id @default(uuid())
  name         String
  code         String
  credits      Float?
  courseType   String
  semesterId   String?

  semester     Semester?    @relation(fields: [semesterId], references: [id])
  assignments  Assignment[]
  timetableEntries TimetableEntry[]
}

model faculty {
  id                String       @id @default(uuid())
  name              String
  organizationEmail String       @unique
  personalEmail     String       @unique
  phone             String?
  departmentId      String
  designation       String
  availability      Int[]
  department        Department   @relation(fields: [departmentId], references: [id])
  assignments       Assignment[] @relation("AssignmentTofaculty")
}

model Assignment {
  id         String    @id @default(uuid())
  courseId   String
  semesterId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  roomId     String?
  scheduleId String?
  sectionId  String?
  roomIds    String[]  @default([])
  course     Course    @relation(fields: [courseId], references: [id])
  room       Room?     @relation(fields: [roomId], references: [id])
  schedule   Schedule? @relation(fields: [scheduleId], references: [id])
  section    Section?  @relation(fields: [sectionId], references: [id])
  semester   Semester  @relation(fields: [semesterId], references: [id])
  faculties  faculty[] @relation("AssignmentTofaculty")
}

model Section {
  id             String     @id @default(uuid())
  name           String
  departmentId   String
  schemaId       String?
  departmentCode String
  batchYearRange String
  fullName       String
  preferredRoom  String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  department     Department @relation(fields: [departmentId], references: [id])
  schema         Scheme?    @relation(fields: [schemaId], references: [id])
  batches        Batch[]
  assignments    Assignment[]
  timetableEntries TimetableEntry[]
}
model Batch {
  id            String   @id @default(uuid())
  name          String
  sectionId     String
  count         Int      @default(20)
  preferredRoom String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  section       Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model AcademicBlock {
  id           String     @id @default(uuid())
  name         String
  blockCode    String     @unique
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  universityId String
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  rooms        Room[]

  @@map("academic_blocks")
}

model Room {
  id              String        @id @default(uuid())
  code            String        @unique
  capacity        Int           @default(0)
  isLab           Boolean       @default(false)
  isActive        Boolean       @default(true)
  academicBlockId String
  departmentId    String?
  availability    Int[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  availability01  Int[]
  assignments     Assignment[]
  academicBlock   AcademicBlock @relation(fields: [academicBlockId], references: [id], onDelete: Cascade)
  department      Department?   @relation(fields: [departmentId], references: [id])

  @@map("rooms")
}

model Schedule {
  id               String       @id @default(uuid())
  name             String
  days             Int          @default(1)
  slots            Int          @default(1)
  departmentId     String
  department       Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  
  assignments      Assignment[]
  scheduleSemesters ScheduleSemester[]
  timetableEntries TimetableEntry[]
}

model ScheduleSemester {
  id         String   @id @default(uuid())
  scheduleId String
  semesterId String
  createdAt  DateTime @default(now())
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, semesterId])
}

model TimetableEntry {
  id          String   @id @default(uuid())
  scheduleId  String
  sectionId   String
  courseId    String
  facultyIds  String[]    
  roomIds     String[]    
  day         Int         
  slot        Int         
  duration    Int         
  createdAt   DateTime @default(now())

  schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}